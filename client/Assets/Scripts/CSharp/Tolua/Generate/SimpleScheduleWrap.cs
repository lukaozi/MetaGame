//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SimpleScheduleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SimpleSchedule), typeof(System.Object));
		L.RegFunction("CreateSequence", CreateSequence);
		L.RegFunction("CreateParallel", CreateParallel);
		L.RegFunction("AddOverListener", AddOverListener);
		L.RegFunction("RemoveOverListener", RemoveOverListener);
		L.RegFunction("Run", Run);
		L.RegFunction("Cancel", Cancel);
		L.RegFunction("SetTimeout", SetTimeout);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsRunning", get_IsRunning, null);
		L.RegVar("IsOver", get_IsOver, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateSequence(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SimpleScheduleSequence o = SimpleSchedule.CreateSequence();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateParallel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			SimpleScheduleParallel o = SimpleSchedule.CreateParallel();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOverListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SimpleSchedule obj = (SimpleSchedule)ToLua.CheckObject<SimpleSchedule>(L, 1);
			System.Action<enScheduleOverType,SimpleSchedule> arg0 = (System.Action<enScheduleOverType,SimpleSchedule>)ToLua.CheckDelegate<System.Action<enScheduleOverType,SimpleSchedule>>(L, 2);
			obj.AddOverListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveOverListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SimpleSchedule obj = (SimpleSchedule)ToLua.CheckObject<SimpleSchedule>(L, 1);
			System.Action<enScheduleOverType,SimpleSchedule> arg0 = (System.Action<enScheduleOverType,SimpleSchedule>)ToLua.CheckDelegate<System.Action<enScheduleOverType,SimpleSchedule>>(L, 2);
			obj.RemoveOverListener(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Run(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SimpleSchedule obj = (SimpleSchedule)ToLua.CheckObject<SimpleSchedule>(L, 1);
			obj.Run();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cancel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			SimpleSchedule obj = (SimpleSchedule)ToLua.CheckObject<SimpleSchedule>(L, 1);
			obj.Cancel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTimeout(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SimpleSchedule obj = (SimpleSchedule)ToLua.CheckObject<SimpleSchedule>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetTimeout(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsRunning(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SimpleSchedule obj = (SimpleSchedule)o;
			bool ret = obj.IsRunning;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsRunning on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsOver(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SimpleSchedule obj = (SimpleSchedule)o;
			bool ret = obj.IsOver;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsOver on a nil value");
		}
	}
}

